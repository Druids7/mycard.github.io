// Generated by CoffeeScript 1.4.0
(function() {
  var Room, Rooms, Server,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Server = (function(_super) {

    __extends(Server, _super);

    function Server() {
      return Server.__super__.constructor.apply(this, arguments);
    }

    Server.configure("Server", "name", "ip", "port", "index");

    Server.extend(Spine.Model.Ajax);

    Server.url = "/servers.json";

    return Server;

  })(Spine.Model);

  Room = (function(_super) {

    __extends(Room, _super);

    function Room() {
      return Room.__super__.constructor.apply(this, arguments);
    }

    Room.configure("Room", "name", "status");

    return Room;

  })(Spine.Model);

  Rooms = (function(_super) {

    __extends(Rooms, _super);

    function Rooms() {
      this.render = __bind(this.render, this);
      Rooms.__super__.constructor.apply(this, arguments);
      Room.bind("refresh", this.render);
    }

    Rooms.prototype.render = function() {
      return this.html($('#room_template').tmpl(_.sortBy(Room.all(), this.sort)));
    };

    Rooms.prototype.sort = function(room) {
      return [room.status === "wait" ? 0 : 1];
    };

    return Rooms;

  })(Spine.Controller);

  $(document).ready(function() {
    var rooms;
    Candy.init('/http-bind/', {
      core: {
        debug: false,
        autojoin: ['mycard@conference.my-card.in']
      },
      view: {
        resources: '/vendor/stylesheets/candy/',
        language: 'cn'
      }
    });
    if (window.location.href.indexOf("candy") !== -1) {
      Candy.Core.connect('zh99998测试80@my-card.in', 'zh112998');
    }
    rooms = new Rooms({
      el: $('#rooms')
    });
    Server.one("refresh", function() {
      var websocket, wsServer;
      wsServer = 'ws://mycard-server.my-card.in:9998';
      websocket = new WebSocket(wsServer);
      websocket.onopen = function() {
        return console.log("Connected to WebSocket server.");
      };
      websocket.onclose = function() {
        return console.log("Disconnected");
      };
      websocket.onmessage = function(evt) {
        var room, _i, _len;
        console.log('Retrieved data from server: ' + evt.data);
        rooms = JSON.parse(evt.data);
        for (_i = 0, _len = rooms.length; _i < _len; _i++) {
          room = rooms[_i];
          if (room._deleted) {
            if (Room.exists(room.id)) {
              Room.find(room.id).destroy();
            }
          }
        }
        return Room.refresh((function() {
          var _j, _len1, _results;
          _results = [];
          for (_j = 0, _len1 = rooms.length; _j < _len1; _j++) {
            room = rooms[_j];
            if (!room._deleted) {
              _results.push(room);
            }
          }
          return _results;
        })());
      };
      return websocket.onerror = function(evt) {
        return console.log('Error occured: ' + evt.data);
      };
    });
    return Server.fetch();
  });

}).call(this);
