// Generated by CoffeeScript 1.4.0
(function() {
  var Card, CardUsage, Deck, cards_encoded, decode, locale, name,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  locale = 'zh';

  Card = (function(_super) {

    __extends(Card, _super);

    function Card() {
      return Card.__super__.constructor.apply(this, arguments);
    }

    Card.types = ['Warrior', 'Spellcaster', 'Fairy', 'Fiend', 'Zombie', 'Machine', 'Aqua', 'Pyro', 'Rock', 'Winged_Beast', 'Plant', 'Insect', 'Thunder', 'Dragon', 'Beast', 'Beast-Warrior', 'Dinosaur', 'Fish', 'Sea_Serpent', 'Reptile', 'Psychic', 'Divine-Beast', 'Creator_God'];

    Card._attributes = ['EARTH', 'WATER', 'FIRE', 'WIND', 'LIGHT', 'DARK', 'DIVINE'];

    Card.card_types = ['Monster', 'Spell', 'Trap', null, 'Normal', 'Effect', 'Fusion', 'Ritual', null, 'Spirit', 'Union', 'Gemini', 'Tuner', 'Synchro', null, null, 'Quick-Play', 'Continuous', 'Equip', 'Field', 'Counter', 'Flip', 'Toon', 'Xyz'];

    Card.configure('Card', 'id', 'name', 'card_type', 'type', 'attribute', 'level', 'atk', 'def', 'description');

    Card.extend(Spine.Model.Ajax);

    Card.extend(Spine.Events);

    Card.url = "https://api.mongolab.com/api/1/databases/mycard/collections/cards?apiKey=508e5726e4b0c54ca4492ead";

    Card.locale_url = "https://api.mongolab.com/api/1/databases/mycard/collections/lang_" + locale + "?apiKey=508e5726e4b0c54ca4492ead";

    Card.query = function(q, callback) {
      var _this = this;
      return $.getJSON("" + this.url + "&q=" + (JSON.stringify(q)), function(cards) {
        var card, cards_id;
        cards_id = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = cards.length; _i < _len; _i++) {
            card = cards[_i];
            _results.push(card._id);
          }
          return _results;
        })();
        return $.getJSON("" + _this.locale_url + "&q=" + (JSON.stringify({
          _id: {
            $in: cards_id
          }
        })), function(langs) {
          var card_type, i, lang;
          cards = (function() {
            var _i, _j, _len, _len1, _results;
            _results = [];
            for (_i = 0, _len = langs.length; _i < _len; _i++) {
              lang = langs[_i];
              for (_j = 0, _len1 = cards.length; _j < _len1; _j++) {
                card = cards[_j];
                if (card._id === lang._id) {
                  $.extend(lang, card);
                  break;
                }
              }
              card_type = [];
              i = 0;
              while (lang.type) {
                if (lang.type & 1) {
                  card_type.push(this.card_types[i]);
                }
                lang.type >>= 1;
                i++;
              }
              _results.push({
                id: card._id,
                name: lang.name,
                card_type: card_type,
                type: lang.race ? (i = 0, (function() {
                  var _results1;
                  _results1 = [];
                  while (!(lang.race >> i & 1)) {
                    _results1.push(i++);
                  }
                  return _results1;
                })(), this.types[i]) : void 0,
                attribute: lang.attribute ? (i = 0, (function() {
                  var _results1;
                  _results1 = [];
                  while (!(lang.attribute >> i & 1)) {
                    _results1.push(i++);
                  }
                  return _results1;
                })(), this._attributes[i]) : void 0,
                level: card.level,
                atk: card.atk,
                def: card.def,
                description: lang.desc
              });
            }
            return _results;
          }).call(_this);
          _this.refresh(cards);
          return callback(cards);
        });
      });
    };

    return Card;

  })(Spine.Model);

  CardUsage = (function(_super) {

    __extends(CardUsage, _super);

    function CardUsage() {
      return CardUsage.__super__.constructor.apply(this, arguments);
    }

    CardUsage.configure("CardUsage", "card_id", "count", "side");

    CardUsage.belongsTo('card', Card);

    return CardUsage;

  })(Spine.Model);

  Deck = (function(_super) {

    __extends(Deck, _super);

    Deck.prototype.events = {
      "mouseenter .card": "show"
    };

    function Deck() {
      this.render = __bind(this.render, this);
      Deck.__super__.constructor.apply(this, arguments);
      CardUsage.bind("refresh change", this.render);
    }

    Deck.prototype.render = function() {
      return this.html($("#card_template").tmpl(CardUsage.all()));
    };

    Deck.prototype.show = function(e) {
      var card;
      card = $(e.target).tmplItem().data.card();
      $("#card_image").attr('src', "https://raw.github.com/zh99998/ygopro-images/master/" + card.id + ".jpg");
      $("#card_name").html(card.name);
      $("#card_card_type").html(card.card_type.join('Â·'));
      $("#card_type").html(card.type);
      $("#card_attribute").html(card.attribute);
      $("#card_level").html(card.level);
      $("#card_atk").html(card.atk);
      $("#card_def").html(card.def);
      return $("#card_description").html(card.description);
    };

    return Deck;

  })(Spine.Controller);

  decode = function(str) {
    var char, key, result, _i, _len;
    key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789*-=";
    result = 0;
    for (_i = 0, _len = str.length; _i < _len; _i++) {
      char = str[_i];
      result <<= 6;
      result += key.indexOf(char);
    }
    return result;
  };

  name = $.url().param('name');

  cards_encoded = $.url().param('cards');

  $('img#qrcode').attr('src', 'https://chart.googleapis.com/chart?chs=200x200&cht=qr&chld=|0&chl=' + encodeURIComponent("http://my-card.in/decks/?name=" + name + "&cards=" + cards_encoded));

  $('#name').html(name);

  $(document).ready(function() {
    var a, cards_id, count, deck, decoded, i, id, side, _i, _ref,
      _this = this;
    deck = [];
    cards_id = [];
    for (i = _i = 0, _ref = cards_encoded.length; _i < _ref; i = _i += 5) {
      decoded = decode(cards_encoded.substr(i, 5));
      side = decoded >> 29;
      count = decoded >> 27 & 0x3;
      id = decoded & 0x07FFFFFF;
      cards_id.push(id);
      deck.push({
        card_id: id,
        count: count,
        side: side
      });
    }
    a = new Deck({
      el: $("#deck")
    });
    return Card.query({
      _id: {
        $in: cards_id
      }
    }, function() {
      return CardUsage.refresh(deck);
    });
  });

}).call(this);
